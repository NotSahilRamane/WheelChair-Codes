// Generated by gencpp from file av_messages/object_.msg
// DO NOT EDIT!


#ifndef AV_MESSAGES_MESSAGE_OBJECT__H
#define AV_MESSAGES_MESSAGE_OBJECT__H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Pose2D.h>
#include <std_msgs/Int16.h>

namespace av_messages
{
template <class ContainerAllocator>
struct object__
{
  typedef object__<ContainerAllocator> Type;

  object__()
    : position()
    , class()
    , status()
    , object_state_dt()
    , id()  {
    }
  object__(const ContainerAllocator& _alloc)
    : position(_alloc)
    , class(_alloc)
    , status(_alloc)
    , object_state_dt(_alloc)
    , id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::std_msgs::String_<ContainerAllocator>  _class_type;
  _class_type class;

   typedef  ::std_msgs::String_<ContainerAllocator>  _status_type;
  _status_type status;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _object_state_dt_type;
  _object_state_dt_type object_state_dt;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::av_messages::object__<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::av_messages::object__<ContainerAllocator> const> ConstPtr;

}; // struct object__

typedef ::av_messages::object__<std::allocator<void> > object_;

typedef boost::shared_ptr< ::av_messages::object_ > object_Ptr;
typedef boost::shared_ptr< ::av_messages::object_ const> object_ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::av_messages::object__<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::av_messages::object__<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::av_messages::object__<ContainerAllocator1> & lhs, const ::av_messages::object__<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.class == rhs.class &&
    lhs.status == rhs.status &&
    lhs.object_state_dt == rhs.object_state_dt &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::av_messages::object__<ContainerAllocator1> & lhs, const ::av_messages::object__<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace av_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::av_messages::object__<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_messages::object__<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_messages::object__<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_messages::object__<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_messages::object__<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_messages::object__<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::av_messages::object__<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d13e84609bddf054577bea1e144b7e8";
  }

  static const char* value(const ::av_messages::object__<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d13e84609bddf05ULL;
  static const uint64_t static_value2 = 0x4577bea1e144b7e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::av_messages::object__<ContainerAllocator> >
{
  static const char* value()
  {
    return "av_messages/object_";
  }

  static const char* value(const ::av_messages::object__<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::av_messages::object__<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A standard object message for perception\n"
"\n"
"geometry_msgs/Point position # position in x, y ,z in meters\n"
"std_msgs/String class # string for the actual object class, i.e. tree, pedestrian, car, truck, etc.\n"
"\n"
"std_msgs/String status # wether the object is static/dynamic in nature etc.\n"
"geometry_msgs/Pose2D object_state_dt # Velocity in x, y, theta of a dynamic object\n"
"\n"
"std_msgs/Int16 id # unique object id for every object\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int16\n"
"int16 data\n"
;
  }

  static const char* value(const ::av_messages::object__<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::av_messages::object__<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.class);
      stream.next(m.status);
      stream.next(m.object_state_dt);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object__

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::av_messages::object__<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::av_messages::object__<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "class: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.class);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "object_state_dt: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.object_state_dt);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AV_MESSAGES_MESSAGE_OBJECT__H
